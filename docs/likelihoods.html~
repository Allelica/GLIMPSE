<!doctype html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
		
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="srubinac" >

    <title>GLIMPSE</title>
    
    <!-- Bootstrap core CSS -->
    <link href="./css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap theme -->
    <link href="./css/bootstrap-theme.min.css" rel="stylesheet">
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <link href="./css/ie10-viewport-bug-workaround.css" rel="stylesheet">
    <!-- JQuery -->
    <script type="text/javascript" src="./script/jquery-1.12.4.min.js"></script>
    <script type="text/javascript" src="./script/bootstrap.min.js"></script>
    <script type="text/javascript" src="./script/docs.min.js"></script>
    <!-- chart JS -->
   	<script type="text/javascript" src="script/Chart.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script type="text/javascript" src="./script/ie10-viewport-bug-workaround.js"></script>
	<!-- Custom styles for this template -->
    <link href="./css/theme.css" rel="stylesheet">
    <!-- Script to load navbar code -->
	<script>
		$(function() {
			$("#navbarbox").load("navbar.html");
		});
    </script> 
</head>

<body>

	<!-- NAVBAR -->
	<nav class="navbar navbar-inverse navbar-fixed-top">
	<div class="container" id="navbarbox"></div>
    </nav>
    
    <!-- CONTENT -->
    <div class="container theme-showcase" role="main">
    
	    <div class="page-header">
	    	<h1>1. Computation of genotype likelihoods</h1>
		</div>
		
		<p>
		GLIMPSE requires input data to take the form of <b>Genotype Likelihoods</b> (GLs).
		GLs need to be computed at all target individuals and <b>all variant sites present in the reference panel</b> of haplotypes used for the imputation.
		In this section, we describe a simple procedure to compute GLs from sequencing data using <a href="http://www.htslib.org/">BCFtools</a>.
		However, other callers, such as GATK for instance, can be also considered as soon as the GLs are encoded in a VCF/BCF file using the FORMAT/PL field.
		</p>
		
		<div class="well">
			<h3>1.1. Extracting variable positions in the reference panel</h3>
				
			<p>
			We want this information to tell bcftools at which positions to make a call.
			For simplicity here, we only focus on SNPs but GLIMPSE can impute any type of variants as soon it is bi-allelic and has GLs being properly defined.
			To perform the extraction from the chromosome 20 of a reference panel <code>myReference.chr20.vcf.gz</code>, run first bcftools as follows:
			</p>
			
			<code> > bcftools view -G -Oz -o myReference.chr20.sites.vcf.gz myReference.chr20.vcf.gz</code>
			
			<br><br><p>Then, convert the output file <code>myReference.chr20.sites.vcf.gz</code> into TSV format, using this command:</p>
			
			<code> > bcftools query -f'%CHROM\t%POS\t%REF,%ALT\n' myReference.chr20.sites.vcf.gz | bgzip -c > myReference.chr20.sites.tsv.gz</code>
			
			<br><br><p>Generate this pair of files (*.vcf.gz + *.tsv.gz) for all chromosome separately.</p>
		</div>
		
		<div class="well">
			<h3>1.2. Computing GLs for a single individual at specific positions</h3>

			<p>
			Once ready the position files, you can then start doing the calling in itself.
			Let's assume the sequencing data for the individual of interest is stored in the following BAM file <code>mySequence.ind1.bam</code>.
			This BAM needs to be aligned on the reference genome, be sorted by positions, and have all PCR duplicates marked (using PICARD for instance). 
			Then, run the following command:
			</p>
			
			<code> 
			> BAM=mySequence.ind1.bam<br>
			&nbsp;> VCF=myReference.chr20.sites.vcf.gz<br>
			&nbsp;> TSV=myReference.chr20.sites.tsv.gz<br>
			&nbsp;> OUT=myGLs.ind1.chr20.vcf.gz<br>
			&nbsp;> bcftools mpileup -I -E -T $VCF -r chr20 $BAM | bcftools call -Aim -C alleles -T $TSV -Oz -o $OUT<br>
			</code>
			
			<br><br><p>c
			Note here, that we use <code>-T myReference.chr20.sites.<b>vcf</b>.gz</code> in the first part of the command line and <code>-T myReference.chr20.sites.<b>tsv</b>.gz</code> in the second par of the command line.
			There might have been simpler ways of doing this, but this worked well in our case. 
			You may also tune the options of bcftools to your specific needs, requirements and data.
			</p>
			
			<p>Of note, if your sequencing data is stored in CRAM files and not BAM files, use this equivalent command:</p>
			
			<code> > bcftools mpileup -f myReferenceGenome.fasta -I -E -a 'FORMAT/DP' -T myReference.chr20.sites.vcf.gz -r chr20 mySequence.bam | bcftools call -Aim -C alleles -T myReference.chr20.sites.tsv.gz -Oz -o myGLs.ind1.vcf.gz</code>
			
			<br><br><p>Where <code>myReferenceGenome.fasta</code> is the reference genome sequence that has been used to map the reads.</p>
		</div>
		
		<div class="page-header">
	    	<h1>2. Split the genome into chunks</h1>
		</div>
		
		<p>
		GLIMPSE requires input data to take the form of <b>Genotype Likelihoods</b> (GLs).
		GLs need to be computed at all target individuals and <b>all variant sites present in the reference panel</b> of haplotypes used for the imputation.
		In this section, we describe a simple procedure to compute GLs from sequencing data using <a href="http://www.htslib.org/">BCFtools</a>.
		However, other callers, such as GATK for instance, can be also considered as soon as the GLs are encoded in a VCF/BCF file using the FORMAT/PL field.
		</p>
		
		<div class="well">
			<h3>2.1. Extracting variable positions in the reference panel</h3>
				
			<p>
			We want this information to tell bcftools at which positions to make a call.
			For simplicity here, we only focus on SNPs but GLIMPSE can impute any type of variants as soon it is bi-allelic and has GLs being properly defined.
			To perform the extraction from the chromosome 20 of a reference panel <code>myReference.chr20.vcf.gz</code>, run first bcftools as follows:
			</p>
			
			<code> > bcftools view -G -Oz -o myReference.chr20.sites.vcf.gz myReference.chr20.vcf.gz</code>
			
			<br><br><p>Then, convert the output file <code>myReference.chr20.sites.vcf.gz</code> into TSV format, using this command:</p>
			
			<code> > bcftools query -f'%CHROM\t%POS\t%REF,%ALT\n' myReference.chr20.sites.vcf.gz | bgzip -c > myReference.chr20.sites.tsv.gz</code>
			
			<br><br><p>Generate this pair of files (*.vcf.gz + *.tsv.gz) for all chromosome separately.</p>
		</div>
		
		<div class="well">
			<h3>2.2. Computing GLs for a single individual at specific positions</h3>

			<p>
			Once ready the position files, you can then start doing the calling in itself.
			Let's assume the sequencing data for the individual of interest is stored in the following BAM file <code>mySequence.ind1.bam</code>.
			This BAM needs to be aligned on the reference genome, be sorted by positions, and have all PCR duplicates marked (using PICARD for instance). 
			Then, run the following command:
			</p>
			
			<code> 
			> BAM=mySequence.ind1.bam<br>
			&nbsp;> VCF=myReference.chr20.sites.vcf.gz<br>
			&nbsp;> TSV=myReference.chr20.sites.tsv.gz<br>
			&nbsp;> OUT=myGLs.ind1.chr20.vcf.gz<br>
			&nbsp;> bcftools mpileup -I -E -T $VCF -r chr20 $BAM | bcftools call -Aim -C alleles -T $TSV -Oz -o $OUT<br>
			</code>
			
			<br><br><p>c
			Note here, that we use <code>-T myReference.chr20.sites.<b>vcf</b>.gz</code> in the first part of the command line and <code>-T myReference.chr20.sites.<b>tsv</b>.gz</code> in the second par of the command line.
			There might have been simpler ways of doing this, but this worked well in our case. 
			You may also tune the options of bcftools to your specific needs, requirements and data.
			</p>
			
			<p>Of note, if your sequencing data is stored in CRAM files and not BAM files, use this equivalent command:</p>
			
			<code> > bcftools mpileup -f myReferenceGenome.fasta -I -E -a 'FORMAT/DP' -T myReference.chr20.sites.vcf.gz -r chr20 mySequence.bam | bcftools call -Aim -C alleles -T myReference.chr20.sites.tsv.gz -Oz -o myGLs.ind1.vcf.gz</code>
			
			<br><br><p>Where <code>myReferenceGenome.fasta</code> is the reference genome sequence that has been used to map the reads.</p>
		</div>
		
		<div class="page-header">
	    	<h1>3. Impute and phase a genomic region</h1>
		</div>
		
		<p>
		GLIMPSE requires input data to take the form of <b>Genotype Likelihoods</b> (GLs).
		GLs need to be computed at all target individuals and <b>all variant sites present in the reference panel</b> of haplotypes used for the imputation.
		In this section, we describe a simple procedure to compute GLs from sequencing data using <a href="http://www.htslib.org/">BCFtools</a>.
		However, other callers, such as GATK for instance, can be also considered as soon as the GLs are encoded in a VCF/BCF file using the FORMAT/PL field.
		</p>
		
		<div class="well">
			<h3>3.1. Extracting variable positions in the reference panel</h3>
				
			<p>
			We want this information to tell bcftools at which positions to make a call.
			For simplicity here, we only focus on SNPs but GLIMPSE can impute any type of variants as soon it is bi-allelic and has GLs being properly defined.
			To perform the extraction from the chromosome 20 of a reference panel <code>myReference.chr20.vcf.gz</code>, run first bcftools as follows:
			</p>
			
			<code> > bcftools view -G -Oz -o myReference.chr20.sites.vcf.gz myReference.chr20.vcf.gz</code>
			
			<br><br><p>Then, convert the output file <code>myReference.chr20.sites.vcf.gz</code> into TSV format, using this command:</p>
			
			<code> > bcftools query -f'%CHROM\t%POS\t%REF,%ALT\n' myReference.chr20.sites.vcf.gz | bgzip -c > myReference.chr20.sites.tsv.gz</code>
			
			<br><br><p>Generate this pair of files (*.vcf.gz + *.tsv.gz) for all chromosome separately.</p>
		</div>
		
		<div class="well">
			<h3>3.2. Computing GLs for a single individual at specific positions</h3>

			<p>
			Once ready the position files, you can then start doing the calling in itself.
			Let's assume the sequencing data for the individual of interest is stored in the following BAM file <code>mySequence.ind1.bam</code>.
			This BAM needs to be aligned on the reference genome, be sorted by positions, and have all PCR duplicates marked (using PICARD for instance). 
			Then, run the following command:
			</p>
			
			<code> 
			> BAM=mySequence.ind1.bam<br>
			&nbsp;> VCF=myReference.chr20.sites.vcf.gz<br>
			&nbsp;> TSV=myReference.chr20.sites.tsv.gz<br>
			&nbsp;> OUT=myGLs.ind1.chr20.vcf.gz<br>
			&nbsp;> bcftools mpileup -I -E -T $VCF -r chr20 $BAM | bcftools call -Aim -C alleles -T $TSV -Oz -o $OUT<br>
			</code>
			
			<br><br><p>c
			Note here, that we use <code>-T myReference.chr20.sites.<b>vcf</b>.gz</code> in the first part of the command line and <code>-T myReference.chr20.sites.<b>tsv</b>.gz</code> in the second par of the command line.
			There might have been simpler ways of doing this, but this worked well in our case. 
			You may also tune the options of bcftools to your specific needs, requirements and data.
			</p>
			
			<p>Of note, if your sequencing data is stored in CRAM files and not BAM files, use this equivalent command:</p>
			
			<code> > bcftools mpileup -f myReferenceGenome.fasta -I -E -a 'FORMAT/DP' -T myReference.chr20.sites.vcf.gz -r chr20 mySequence.bam | bcftools call -Aim -C alleles -T myReference.chr20.sites.tsv.gz -Oz -o myGLs.ind1.vcf.gz</code>
			
			<br><br><p>Where <code>myReferenceGenome.fasta</code> is the reference genome sequence that has been used to map the reads.</p>
		</div>

		<div class="page-header">
	    	<h1>4. Ligate multiple chunks together</h1>
		</div>
		
		<p>
		GLIMPSE requires input data to take the form of <b>Genotype Likelihoods</b> (GLs).
		GLs need to be computed at all target individuals and <b>all variant sites present in the reference panel</b> of haplotypes used for the imputation.
		In this section, we describe a simple procedure to compute GLs from sequencing data using <a href="http://www.htslib.org/">BCFtools</a>.
		However, other callers, such as GATK for instance, can be also considered as soon as the GLs are encoded in a VCF/BCF file using the FORMAT/PL field.
		</p>
		
		<div class="well">
			<h3>4.1. Extracting variable positions in the reference panel</h3>
				
			<p>
			We want this information to tell bcftools at which positions to make a call.
			For simplicity here, we only focus on SNPs but GLIMPSE can impute any type of variants as soon it is bi-allelic and has GLs being properly defined.
			To perform the extraction from the chromosome 20 of a reference panel <code>myReference.chr20.vcf.gz</code>, run first bcftools as follows:
			</p>
			
			<code> > bcftools view -G -Oz -o myReference.chr20.sites.vcf.gz myReference.chr20.vcf.gz</code>
			
			<br><br><p>Then, convert the output file <code>myReference.chr20.sites.vcf.gz</code> into TSV format, using this command:</p>
			
			<code> > bcftools query -f'%CHROM\t%POS\t%REF,%ALT\n' myReference.chr20.sites.vcf.gz | bgzip -c > myReference.chr20.sites.tsv.gz</code>
			
			<br><br><p>Generate this pair of files (*.vcf.gz + *.tsv.gz) for all chromosome separately.</p>
		</div>
		
		<div class="well">
			<h3>4.2. Computing GLs for a single individual at specific positions</h3>

			<p>
			Once ready the position files, you can then start doing the calling in itself.
			Let's assume the sequencing data for the individual of interest is stored in the following BAM file <code>mySequence.ind1.bam</code>.
			This BAM needs to be aligned on the reference genome, be sorted by positions, and have all PCR duplicates marked (using PICARD for instance). 
			Then, run the following command:
			</p>
			
			<code> 
			> BAM=mySequence.ind1.bam<br>
			&nbsp;> VCF=myReference.chr20.sites.vcf.gz<br>
			&nbsp;> TSV=myReference.chr20.sites.tsv.gz<br>
			&nbsp;> OUT=myGLs.ind1.chr20.vcf.gz<br>
			&nbsp;> bcftools mpileup -I -E -T $VCF -r chr20 $BAM | bcftools call -Aim -C alleles -T $TSV -Oz -o $OUT<br>
			</code>
			
			<br><br><p>c
			Note here, that we use <code>-T myReference.chr20.sites.<b>vcf</b>.gz</code> in the first part of the command line and <code>-T myReference.chr20.sites.<b>tsv</b>.gz</code> in the second par of the command line.
			There might have been simpler ways of doing this, but this worked well in our case. 
			You may also tune the options of bcftools to your specific needs, requirements and data.
			</p>
			
			<p>Of note, if your sequencing data is stored in CRAM files and not BAM files, use this equivalent command:</p>
			
			<code> > bcftools mpileup -f myReferenceGenome.fasta -I -E -a 'FORMAT/DP' -T myReference.chr20.sites.vcf.gz -r chr20 mySequence.bam | bcftools call -Aim -C alleles -T myReference.chr20.sites.tsv.gz -Oz -o myGLs.ind1.vcf.gz</code>
			
			<br><br><p>Where <code>myReferenceGenome.fasta</code> is the reference genome sequence that has been used to map the reads.</p>
		</div>
		
		<div class="page-header">
	    	<h1>5. Sample haplotypes</h1>
		</div>
		
		<p>
		GLIMPSE requires input data to take the form of <b>Genotype Likelihoods</b> (GLs).
		GLs need to be computed at all target individuals and <b>all variant sites present in the reference panel</b> of haplotypes used for the imputation.
		In this section, we describe a simple procedure to compute GLs from sequencing data using <a href="http://www.htslib.org/">BCFtools</a>.
		However, other callers, such as GATK for instance, can be also considered as soon as the GLs are encoded in a VCF/BCF file using the FORMAT/PL field.
		</p>
		
		<div class="well">
			<h3>5.1. Extracting variable positions in the reference panel</h3>
				
			<p>
			We want this information to tell bcftools at which positions to make a call.
			For simplicity here, we only focus on SNPs but GLIMPSE can impute any type of variants as soon it is bi-allelic and has GLs being properly defined.
			To perform the extraction from the chromosome 20 of a reference panel <code>myReference.chr20.vcf.gz</code>, run first bcftools as follows:
			</p>
			
			<code> > bcftools view -G -Oz -o myReference.chr20.sites.vcf.gz myReference.chr20.vcf.gz</code>
			
			<br><br><p>Then, convert the output file <code>myReference.chr20.sites.vcf.gz</code> into TSV format, using this command:</p>
			
			<code> > bcftools query -f'%CHROM\t%POS\t%REF,%ALT\n' myReference.chr20.sites.vcf.gz | bgzip -c > myReference.chr20.sites.tsv.gz</code>
			
			<br><br><p>Generate this pair of files (*.vcf.gz + *.tsv.gz) for all chromosome separately.</p>
		</div>
		
		<div class="well">
			<h3>5.2. Computing GLs for a single individual at specific positions</h3>

			<p>
			Once ready the position files, you can then start doing the calling in itself.
			Let's assume the sequencing data for the individual of interest is stored in the following BAM file <code>mySequence.ind1.bam</code>.
			This BAM needs to be aligned on the reference genome, be sorted by positions, and have all PCR duplicates marked (using PICARD for instance). 
			Then, run the following command:
			</p>
			
			<code> 
			> BAM=mySequence.ind1.bam<br>
			&nbsp;> VCF=myReference.chr20.sites.vcf.gz<br>
			&nbsp;> TSV=myReference.chr20.sites.tsv.gz<br>
			&nbsp;> OUT=myGLs.ind1.chr20.vcf.gz<br>
			&nbsp;> bcftools mpileup -I -E -T $VCF -r chr20 $BAM | bcftools call -Aim -C alleles -T $TSV -Oz -o $OUT<br>
			</code>
			
			<br><br><p>c
			Note here, that we use <code>-T myReference.chr20.sites.<b>vcf</b>.gz</code> in the first part of the command line and <code>-T myReference.chr20.sites.<b>tsv</b>.gz</code> in the second par of the command line.
			There might have been simpler ways of doing this, but this worked well in our case. 
			You may also tune the options of bcftools to your specific needs, requirements and data.
			</p>
			
			<p>Of note, if your sequencing data is stored in CRAM files and not BAM files, use this equivalent command:</p>
			
			<code> > bcftools mpileup -f myReferenceGenome.fasta -I -E -a 'FORMAT/DP' -T myReference.chr20.sites.vcf.gz -r chr20 mySequence.bam | bcftools call -Aim -C alleles -T myReference.chr20.sites.tsv.gz -Oz -o myGLs.ind1.vcf.gz</code>
			
			<br><br><p>Where <code>myReferenceGenome.fasta</code> is the reference genome sequence that has been used to map the reads.</p>
		</div>
    </div> <!-- /container -->
	
 <footer class="footer">
      <div class="container">
        <span class="text-muted">Copyright © 2020 University of Lausanne | All Rights Reserved</span>
      </div>
    </footer>
</body>
    